name: terraform_pipeline_non_prod
on:
  push:
    branches:    
    - '*'         # matches every branch that doesn't contain a '/'
    - '*/*'       # matches every branch containing a single '/'
    - '**'        # matches every branch
    - '!master'   # excludes master
  pull_request:
    branches: [ "main" ]
env:
  tf_actions_working_dir: ${{ vars.tf_actions_working_dir }}
defaults:
  environment: test
  run:
    shell: bash
jobs:
  initial-start:
    runs-on: ubuntu-latest
    name: initial start
    steps:
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  run-editorconfig-check: 
    needs: [initial-start]
    runs-on: ubuntu-latest
    name: .editorconfig check
    steps:
      - uses: actions/checkout@v3
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker
  
  run-markdown-lint: 
    needs: [initial-start]
    runs-on: ubuntu-latest
    name: markdownlint lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Install dependencies
        run: npm install -g markdownlint-cli

      - name: Run Markdown linting
        run: |
          markdownlint **/*.md
  
  terraform-fmt:
    name: 'terraform-fmt'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    permissions:
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: false

  run-checkov:
    runs-on: ubuntu-latest
    env:
      CHECKOV_SKIPPED_CHECKS:
    name: analysis with Checkov 
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Checkov GitHub Action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          #skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          output_format: cli # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          output_file_path: console
          skip_check: ${{ env.CHECKOV_SKIPPED_CHECKS }}
          quiet: true
      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v2

      #   # Results are generated only on a success or failure
      #   # this is required since GitHub by default won't run the next step
      #   # when the previous one has failed. Security checks that do not pass will 'fail'.
      #   # An alternative is to add `continue-on-error: true` to the previous step
      #   # Or 'soft_fail: true' to checkov.
      #   if: success() || failure()
      #   with:
      #     sarif_file: results.sarif

  terraform-validate:
    name: 'terraform-validate'
    needs: [terraform-fmt, checkov-job]
    runs-on: ubuntu-latest
    environment: ${{ env.environment }}
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    permissions:
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

  terraform-plan:
    name: 'terraform-plan'
    needs: [terraform-fmt, checkov-job, terraform-validate]
    runs-on: ubuntu-latest
    environment: ${{ env.environment }}
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    permissions:
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: false

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: false

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ job.terraform-plan.steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ job.terraform-validate.steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ job.terraform-validate.steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ job.terraform-validate.steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ job.terraform-plan.steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }