name: terraform_pipeline
on:
  push:
    branches:    
    - '*'         # matches every branch that doesn't contain a '/'
    - '*/*'       # matches every branch containing a single '/'
    - '**'        # matches every branch
    - '!master'   # excludes master
  pull_request:
    branches: [ "main" ]
env:
  tf_actions_working_dir: ${{ vars.tf_actions_working_dir }}
defaults:
  run:
    shell: bash
jobs:
  terraform-fmt:
    name: 'terraform-fmt'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    permissions:
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: false

  checkov-job:
    runs-on: ubuntu-latest
    needs: [terraform-fmt]
    name: checkov-job
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          #skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif

  terraform-validate:
    name: 'terraform-validate'
    needs: [terraform-fmt, checkov-job]
    runs-on: ubuntu-latest
    environment: test
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    permissions:
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: false

  terraform-plan:
    name: 'terraform-plan'
    needs: [terraform-fmt, checkov-job, terraform-validate]
    runs-on: ubuntu-latest
    environment: test
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    permissions:
      pull-requests: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: false

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: false

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ job.terraform-validate.steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ job.terraform-validate.steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ job.terraform-validate.steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ job.terraform-plan.steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }